{"version":3,"sources":["components/Message/Message.module.css","components/LoginPage/Login.module.css","components/Header/Header.module.css","components/ChatHistory/ChatHistory.module.css","components/ChatInput/ChatInput.module.css","api/index.js","components/Header/Header.js","components/Message/Message.js","components/ChatHistory/ChatHistory.js","components/ChatInput/ChatInput.js","components/ChatRoom/ChatRoom.js","components/LoginPage/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HOST","window","location","hostname","socket","WebSocket","connect","cb","console","log","onopen","onmessage","msg","onclose","event","onerror","err","sendMsg","send","Header","props","className","styles","header","roomID","username","onClick","Exithandler","exit","Message","temp","JSON","parse","message","state","msgStyle","this","Type","MessageJoin","Body","MessageDisjoin","Username","MessageMe","MessageOther","Component","ChatHistory","chatHistory","messages","map","data","ChatInput","onKeyDown","ChatRoom","roomid","members","Login","errormsg","error","status","Error","JoinPage","JoinPageFlex","onChange","NameHandler","type","required","placeholder","RoomIDHandler","JoinRoomHandler","CreateRoomHandler","App","body","CheckUserName","length","setState","CheckRoomID","RoomID","isNaN","target","value","parseInt","stringify","ExitHandler","keyCode","RoomJoined","Members","pmsg","RoomMembers","UserName","page","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.66285121.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"MessageOther\":\"Message_MessageOther__1HgkM\",\"MessageMe\":\"Message_MessageMe__1UYXW\",\"MessageJoin\":\"Message_MessageJoin__1LHGk\",\"MessageDisjoin\":\"Message_MessageDisjoin__i_W7F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"JoinPage\":\"Login_JoinPage__2snEu\",\"JoinPageFlex\":\"Login_JoinPageFlex__J2wV2\",\"Error\":\"Login_Error__2qqY3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1gtQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatHistory\":\"ChatHistory_ChatHistory__37Zrc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ChatInput\":\"ChatInput_ChatInput__t2p0Y\"};","var HOST = \"ws://\" + window.location.hostname\r\nvar socket = new WebSocket(HOST+\":8080/ws\")\r\n\r\nlet connect = cb => {\r\n    console.log(\"Attempting Connection....\");\r\n\r\n    socket.onopen = () => {\r\n        console.log(\"Successfully Connected\");\r\n    };\r\n\r\n    socket.onmessage = msg => {\r\n        console.log(msg);\r\n        cb(msg);\r\n    };\r\n\r\n    socket.onclose = event => {\r\n        console.log(\"Socket Closed Connection: \", event);\r\n    };\r\n\r\n    socket.onerror = err => {\r\n        console.log(\"Socket error: \", err);\r\n    };\r\n};\r\n\r\nlet sendMsg = msg => {\r\n    console.log(\"Sending msg\");\r\n    socket.send(msg);\r\n};\r\n\r\nexport { connect, sendMsg};","import React from 'react';\r\nimport styles from \"./Header.module.css\";\r\n\r\nconst Header = (props) => (\r\n    <div className = {styles.header}>\r\n        <h2> Realtime Chat App </h2>\r\n        <h2> Room ID: {props.roomID}</h2>\r\n        <h2> UserName: {props.username}</h2>\r\n        <button onClick={() => props.Exithandler()} className={styles.exit}> EXIT </button>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./Message.module.css\";\r\n\r\nconst JOIN = 1;\r\nconst CREATE = 2;\r\nconst CHAT = 3;\r\nconst DISCONNECT = 4;\r\n\r\nclass Message extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        let temp = JSON.parse(this.props.message);\r\n        this.state = {\r\n            message: temp\r\n        };\r\n    }\r\n\r\n    render() {\r\n        var msgStyle;\r\n        switch(this.state.message.Type){\r\n            case JOIN:\r\n                msgStyle = (<div className = {styles.MessageJoin}>\r\n                                <h3>{this.state.message.Body}</h3>\r\n                            </div>);\r\n                break;\r\n            case CREATE:\r\n                msgStyle = (<div className = {styles.MessageJoin}>\r\n                    <h3>{this.state.message.Body}</h3>\r\n                </div>);\r\n                break;\r\n            case DISCONNECT:\r\n                msgStyle = \r\n                    (<div className = {styles.MessageDisjoin}>\r\n                        {this.state.message.Body}\r\n                    </div>);\r\n                break;\r\n            case CHAT:\r\n                msgStyle = this.props.username === this.state.message.Username ? (<div className = {styles.MessageMe}>\r\n                    {this.state.message.Body}\r\n                 </div>) : (<div className = {styles.MessageOther}>\r\n                   <b>{this.state.message.Username}</b> {this.state.message.Body}\r\n                </div>);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return (\r\n            <div>\r\n                {msgStyle}\r\n            </div>\r\n        \r\n        );\r\n    }\r\n}\r\n\r\nexport default Message;","import React, { Component } from 'react';\r\nimport styles from \"./ChatHistory.module.css\";\r\nimport Message from \"../Message/Message\";\r\n\r\nclass ChatHistory extends Component {\r\n\r\n    \r\n    render() {\r\n        console.log(this.props.chatHistory);\r\n        const messages = this.props.chatHistory.map(msg => (\r\n            <Message message = {msg.data} username ={this.props.username} />\r\n        ));\r\n\r\n        return (\r\n            <div className= {styles.ChatHistory}>\r\n                <h2> Chat History</h2>\r\n                {messages}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatHistory;","import React, { Component } from \"react\";\r\nimport styles from \"./ChatInput.module.css\";\r\n\r\nclass ChatInput extends Component {\r\n    render() {\r\n        return (\r\n            <div className={styles.ChatInput}>\r\n                <input onKeyDown={this.props.send} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatInput;","import React from 'react';\r\nimport Header from \"../Header/Header\";\r\nimport ChatHistory from \"../ChatHistory/ChatHistory\";\r\nimport ChatInput from \"../ChatInput/ChatInput\";\r\n\r\nconst ChatRoom = (props) => {\r\n    return (\r\n        <div>\r\n            <Header \r\n            roomID={props.roomid} \r\n            username={props.username} \r\n            members={props.members} \r\n            Exithandler= {props.Exithandler}/>\r\n            <ChatHistory chatHistory = {props.chatHistory} username={props.username} />\r\n            <ChatInput send = {props.send} /> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatRoom;","import React from 'react';\r\nimport styles from \"./Login.module.css\";\r\n\r\nconst Login = (props) => {\r\n    let errormsg = props.error.status ? (<div className={styles.Error}>{props.error.message}</div>) : null;\r\n    return (\r\n        <div className={styles.JoinPage}>\r\n          <div className={styles.JoinPageFlex}>\r\n            <div> USERNAME </div>\r\n            <div>\r\n                <input onChange={props.NameHandler} type=\"text\" required placeholder=\"Enter Name ......\"/>\r\n            </div>\r\n          </div>\r\n          <div className={styles.JoinPageFlex}>\r\n            <div> ROOM ID </div>\r\n            <div> <input onChange={props.RoomIDHandler} /> </div>\r\n          </div>\r\n          <div className={styles.JoinPageFlex}>\r\n            <button onClick={props.JoinRoomHandler}>Join</button>\r\n            <button onClick = {props.CreateRoomHandler}> Create </button>\r\n          </div>\r\n          {errormsg}\r\n    </div>\r\n    );\r\n}\r\nexport default Login;","import React, { Component } from 'react';\nimport \"./App.css\";\nimport { connect, sendMsg } from \"./api\";\nimport ChatRoom from './components/ChatRoom/ChatRoom';\nimport Login from './components/LoginPage/Login';\n\n\nconst JOIN = 1;\nconst CREATE = 2;\nconst CHAT = 3;\nconst DISCONNECT = 4;\nconst EXIT = 5;\nconst ERROR = 0;\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      chatHistory: [],\n      RoomJoined: false,\n      Username: \"\",\n      RoomID: -1,\n      Members: [],\n      error: {\n        status: false,\n        message: \"\"\n      }\n    }\n    connect();\n  }\n\n  componentDidMount() {\n    connect((msg) => {\n      var pmsg = JSON.parse(msg.data);\n      console.log(pmsg.Type);\n      switch(pmsg.Type) {\n        case JOIN:\n          console.log(\"Join Request approved\");\n          this.setState(state => ({\n            RoomJoined: true,\n            RoomID: parseInt(pmsg.RoomID,10),\n            Members: pmsg.RoomMembers,\n            chatHistory: [...this.state.chatHistory,msg],\n            error: {\n              status: false,\n              message: \"\"\n            }\n          }));\n          break;\n        case CHAT:\n          console.log(\"New message recieved\");\n          this.setState((state) => ({\n            chatHistory: [...this.state.chatHistory,msg],\n            error: {\n              status: false,\n              message: \"\"\n            }\n          }));\n          break;\n        case DISCONNECT:\n          console.log(\" A User has been disconnected\");\n          this.setState((state) => ({\n            chatHistory: [...this.state.chatHistory,msg],\n            Members: pmsg.RoomMembers,\n            error: {\n              status: false,\n              message: \"\"\n            }\n          }));\n          break;\n        case EXIT:\n          console.log(\" User has been disconnected\");\n          this.setState((state) => ({\n            chatHistory: [],\n            RoomJoined: false,\n            RoomID: -1,\n            UserName: \"\",\n            Members: [],\n            error: {\n              status: false,\n              message: \"\"\n            }\n          }));\n          break;\n        case ERROR:\n          console.log(\"An error has occured\");\n          this.setState((state) => ({\n            error: {\n              status: true,\n              message: pmsg.Body\n            }\n          }));\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  Message = (type,username,roomid,body) => {\n    let msg = {\n      type: type,\n      username: username,\n      roomid: roomid,\n      body: body\n    }\n    return msg\n  }\n\n  CheckUserName = () => {\n    if (this.state.Username.length === 0 ){\n      console.log(\"Username is empty\");\n      this.setState(state => ({\n        error: {\n          status : true,\n          message: \"Username can not be empty\"\n        }\n      }));\n      return false;\n    }\n    return true;\n  }\n\n  CheckRoomID = () => {\n    if (this.state.RoomID.length === 0) {\n      this.setState(state => ({\n        error: {\n          status : true,\n          message: \"Roomid can not be empty\"\n        }\n      }));\n      return false;\n    }\n\n    if (isNaN(this.state.RoomID)) {\n      this.setState(state => ({\n        error: {\n          status : true,\n          message: \"Roomid must be a number\"\n        }\n      }));\n      return false;\n    }\n    return true;\n  }\n\n  NameHandler = (event) =>{\n    this.setState({\n        Username: event.target.value\n    });\n  }\n\n  RoomIDHandler = (event) => {\n      this.setState({\n          RoomID: parseInt(event.target.value,10)\n      });\n  }\n\n  JoinRoomHandler = () => {\n    if (this.CheckUserName() && this.CheckRoomID()) {\n      let msg = this.Message(JOIN,this.state.Username,this.state.RoomID,\"\");\n      msg = JSON.stringify(msg)\n      console.log(\"sending request to join room\", msg);\n      sendMsg(msg);\n    }\n  }\n\n  CreateRoomHandler = () =>{\n    if (this.CheckUserName()) {\n      let msg = this.Message(CREATE,this.state.Username,this.state.RoomID,\"\");\n      msg = JSON.stringify(msg)\n      console.log(\"sending request to create room\", msg);\n      sendMsg(msg);\n    }\n  }\n  ExitHandler = () => {\n    let msg = this.Message(EXIT,this.state.Username,this.state.RoomID,\"disconnect\")\n    msg = JSON.stringify(msg)\n    console.log(\"sending request to exit room\", msg);\n    sendMsg(msg);\n    // this.setState((state) => ({\n    //   chatHistory: [],\n    //   RoomJoined: false,\n    //   RoomID: -1,\n    //   UserName: \"\",\n    //   Members: [],\n    //   error: {\n    //     status: false,\n    //     message: \"\"\n    //   }\n    // }));\n  }\n\n  send = (event) => {\n    if (event.keyCode === 13){\n        let msg = this.Message(CHAT,this.state.Username,this.state.RoomID,event.target.value)\n        msg = JSON.stringify(msg)\n        sendMsg(msg);\n      event.target.value = \"\";\n    }\n    \n  }\n\n  render() {\n      let page = this.state.RoomJoined ? \n      ( <div><ChatRoom \n        roomid={this.state.RoomID}\n        username={this.state.Username}\n        members={this.state.Members}\n        chatHistory={this.state.chatHistory}\n        send={this.send} \n        Exithandler={this.ExitHandler} /> \n      </div> ) \n      : ( <div >\n          <Login \n          error={this.state.error}\n          NameHandler={this.NameHandler}\n          RoomIDHandler={this.RoomIDHandler}\n          CreateRoomHandler={this.CreateRoomHandler}\n          JoinRoomHandler={this.JoinRoomHandler} /> </div>);\n      return(\n        <div className = \"App\">\n          {page}\n        </div>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}